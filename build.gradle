/**
 * Tasks:
 *  - runPrivate
 *  - bootRun
 *
 * Gradle options (supplied with `-P` prefix):
 *  - jvmArgs - adding Java VM options;
 *  - useMavenLocal - prefer locally installed maven libraries.
 *
 * System properties (supplied with `-D` prefix):
 * Default heap size is 1.5G, unless user change via command line or run `runPrivate` task,
 * which sets 3.5 GB.
 */

ext.maxHeapSize = '-Xmx1500m' // default is 1.5G, but could be changed via command line or launched task type

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE")
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.4"
        classpath "co.riiid:gradle-github-plugin:0.4.2" // github releases
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'spring-boot'
apply plugin: 'application'
apply plugin: "com.github.johnrengelman.shadow"

if (project.hasProperty('useMavenLocal')) {
    println "Flag enabled: using fti jar from maven local repo if exist"
    repositories {
        mavenLocal()
    }
}

repositories {

    jcenter()

    mavenCentral()

    maven { url "https://oss.jfrog.org/libs-snapshot/" }
    maven { url "https://dl.bintray.com/ethereum/maven/" }
    maven { url "https://repo.spring.io/libs-snapshot" }
}

ext {
    slf4jVersion = '1.7.7'
    leveldbVersion = '0.7'
    scastleVersion = '1.58.0.0'
    springVersion = '4.2.0.RELEASE'
    hibernateVersion = '4.3.7.Final'
    junitVersion = '4.11'
}

dependencies {
    compile "io.netty:netty-all:4.0.30.Final"
    compile "com.madgag.spongycastle:core:${scastleVersion}" // for SHA3 and SECP256K1
    compile "com.madgag.spongycastle:prov:${scastleVersion}" // for SHA3 and SECP256K1

    compile "org.iq80.leveldb:leveldb:${leveldbVersion}"     // Java API wrapper around native components

    compile "org.ethereum:leveldbjni-all:1.18.3"             // native leveldb components

    compile "org.ethereum:rocksdbjni:5.9.2"                   // RocksDB Java API

    compile "org.ethereum:solcJ-all:0.4.19"                  // Solidity Compiler win/mac/linux binaries

    compile "com.google.guava:guava:24.1-jre"

    compile "com.cedarsoftware:java-util:1.8.0" // for deep equals
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "ch.qos.logback:logback-classic:1.1.7"
    compile "com.fasterxml.jackson.core:jackson-databind:2.5.1"
    compile "org.apache.commons:commons-collections4:4.0"
    compile "org.apache.commons:commons-lang3:3.4"
    compile "commons-codec:commons-codec:1.10"
    compile "org.springframework:spring-context:${springVersion}"
    compile "com.typesafe:config:1.2.1"
    compile "com.googlecode.concurrent-locks:concurrent-locks:1.0.0"
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.26'
    compile("com.googlecode.json-simple:json-simple:1.1.1") {
        exclude group: 'junit', module: 'junit'
    }

    compile "org.xerial.snappy:snappy-java:1.1.4" // Snappy compression

    if (JavaVersion.current().ordinal() > 7) { // Java 9+ compatibility
        compile 'javax.xml.bind:jaxb-api:2.2.11'
        compile 'com.sun.xml.bind:jaxb-core:2.2.11'
        compile 'com.sun.xml.bind:jaxb-impl:2.2.11'
        compile 'javax.xml.ws:jaxws-api:2.2.11'
    }
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-websocket"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"

    compile "org.hsqldb:hsqldb"
    compile 'com.h2database:h2:1.4.191'

    compile "org.projectlombok:lombok:1.16.20"
    compile "com.maxmind.geoip:geoip-api:1.3.1"
    compile "com.github.briandilley.jsonrpc4j:jsonrpc4j:1.2.0"
    compile "javax.portlet:portlet-api:2.0"
    compile "org.apache.commons:commons-io:1.3.2"

    compile "org.functionaljava:functionaljava:4.6"
    compile "org.functionaljava:functionaljava-java8:4.6"

    compile "com.mashape.unirest:unirest-java:1.3.1"

    /* WEB DEPENDENCIES */
    if (!project.hasProperty('rpcOnly')) {
        compile("org.webjars.bower:bootstrap:3.3.6")
        compile("org.webjars.bower:jquery:2.2.4")

        compile("org.webjars.bower:angular-route:1.5.8")
        compile("org.webjars.bower:angular-animate:1.5.8")

        compile("org.webjars.bower:sockjs-client:1.1.1")
        compile("org.webjars.bower:filesize:3.2.1")
        compile("org.webjars.bower:toastr:2.1.2")
        compile("org.webjars.bower:pace:1.0.2")
        compile("org.webjars.bower:font-awesome:4.6.3")
        compile("org.webjars.bower:animate.css:3.5.2")
        compile("org.webjars.bower:moment:2.14.1")

        compile("org.webjars.bower:datamaps:0.5.7")
        compile("org.webjars.bower:d3:3.5.17")
        compile("org.webjars.bower:topojson:1.6.26")

        compile("org.webjars.bower:jquery-mousewheel:3.1.13")
        compile("org.webjars.bower:malihu-custom-scrollbar-plugin:3.1.5")
        compile("org.webjars.bower:angular-ui:0.4.0")
        compile("org.webjars.bower:underscore:1.8.3")
        compile("org.webjars.npm:bignumber.js:2.4.0")
    }

    // desktop GUI
    compile group: 'com.dorkbox', name: 'SystemTray', version: '2.20'
    compile group: 'org.codehaus.janino', name: 'janino', version: '3.0.6'  // for having if-statement in logback.xml

    compile "org.codehaus.jackson:jackson-core-asl:1.9.13"
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.13"

    testCompile "junit:junit"
    testCompile "org.springframework:spring-test"
    testCompile "org.springframework.boot:spring-boot-starter-test"
}

apply from: 'desktop.gradle'

mainClassName = 'com.fanstime.fti.web.Application'
def defaultJvmArgs = ["-server",
                      "-Xss2M",
                      "-XX:+UseCompressedOops",
                      "-XX:+HeapDumpOnOutOfMemoryError",
                      "-XX:-OmitStackTraceInFastThrow"]
applicationDefaultJvmArgs = []


task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

task stage {
    dependsOn bootRepackage
}

bootRun {
    putIfEmpty System.properties, "logback.configurationFile", "src/main/resources/logback.xml"

    systemProperties = System.properties

    addResources = true

    def args = []
    args.addAll(defaultJvmArgs)
    if ( project.hasProperty('jvmArgs') ) {
        println "Adding properties from jvmArgs " + project.jvmArgs

        project.jvmArgs.split('\\s+').each {
            if (it) {       // prevent empty string, which could cause "Error: Could not find or load main class"
                args.add(it)
            }
        }
    }

    jvmArgs.addAll(args)
}

bootRepackage {
    excludeDevtools = true
}

springBoot {
    mainClass = "com.fanstime.fti.web.Application"
}

test {
    dependsOn cleanTest
    testLogging.showStandardStreams = true
}

sourceCompatibility=1.8

[compileJava, compileTestJava]*.options*.compilerArgs = ['-parameters']


configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

jar {
    String someString = ''
    configurations.runtime.each { someString = someString + " lib\\" + it.name } //遍历项目的所有依赖的jar包赋值给变量someString
    manifest {
        attributes 'Main-Class': mainClassName
        attributes 'Class-Path': someString
    }

}
task copyJar(type:Copy){
    from configurations.runtime
    into ('build/libs/lib')
}

task runPrivate() {
    doLast {
        // change default max heap value for this task as it involves mining
        maxHeapSize = "-Xmx3500M"

        bootRunWithNetworkConfig('private', true)
    }
}

def getDatabaseDir(String name) {
    return System.getProperty("user.home") + "/fti/" + name
}

def bootRunWithNetworkConfig(String name, boolean includePresets) {
    def newArgs = []
    if (includePresets) {
        addJvmArgIfEmpty "database.dir", getDatabaseDir("database-" + name)
        newArgs.addAll([
                '-Dfti.conf.res=' + name + '.conf',
                '-Ddatabase.name=database-' + name,
                '-DnetworkProfile=' + name])
    }

    // set heap size configure in task
    if (!project.hasProperty('jvmArgs') || project.jvmArgs.indexOf('-Xmx') == -1) {
        println('Set default heap size for task ' + maxHeapSize)
        newArgs.add(maxHeapSize)
    } else {
        println('Using heap size from user input ' + project.jvmArgs)
    }

    // RPC only module
    if (project.hasProperty('rpcOnly')) {
        newArgs.addAll([
                '-Dmodules.contracts.enabled=false',
                '-Dmodules.web.enabled=false',
                '-Dmodules.rpc.enabled=true'])
    }

    bootRun.jvmArgs.addAll(newArgs)
    println 'Running Java with ' + bootRun.jvmArgs

    tasks.compileJava.execute()
    tasks.bootRun.execute()
}


def putIfEmpty(Properties properties, String key, String value) {
    // don't use System.hasProperty as it is groovy wrapper
    if (System.getProperty(key) == null) {
        properties.put key, value
    }
}

def addJvmArgIfEmpty(String key, String value) {
    boolean hasSystemProperty = System.getProperty(key) != null;
    if (!hasSystemProperty) {
        bootRun.jvmArgs.add('-D' + key + '=' + value)
    }
}



task webjar(type: Jar, dependsOn: "jar") {
    from(fileTree("dist")) {
        into "META-INF/resources"
    }
}

/**
 * Run import blocks action.
 * Be sure to pass genesis, database location and path to blocks.
 * @example `./gradlew
 *                  -Ddatabase.dir=database-private -Dgenesis=frontier-private.json
 *                  -Dblocks.loader=blocks.rlp -Dblocks.format=rlp`
 */
task importBlocks(type: JavaExec) {
    main                "org.fti.Start"
    classpath           sourceSets.main.runtimeClasspath
    description         "Running import blocks"

    // pass CLI properties (set of -Dprop=value) to forked java process
    systemProperties    System.properties
    systemProperty      "logback.configurationFile", "src/main/resources/logback.xml"
    systemProperty      "peer.discovery.enabled", false
    systemProperty      "peer.listen.port", 0
    systemProperty      "sync.enabled", false
}






